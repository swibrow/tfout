name: Deploy Documentation

on:
  push:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r docs/requirements.txt

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
        if: github.event_name != 'pull_request'

      - name: Build documentation
        run: |
          mkdocs build --strict

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        if: github.event_name != 'pull_request'
        with:
          path: './site'

  # Deployment job
  deploy:
    if: github.event_name != 'pull_request'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Check job for PRs
  check:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r docs/requirements.txt

      - name: Build documentation (check only)
        run: |
          mkdocs build --strict

      - name: Check for broken links
        run: |
          # Install link checker
          pip install linkchecker

          # Start mkdocs server in background
          mkdocs serve --dev-addr=127.0.0.1:8000 &
          MKDOCS_PID=$!

          # Wait for server to start
          sleep 5

          # Check links (excluding external links for faster checks)
          linkchecker --check-extern http://127.0.0.1:8000 || true

          # Clean up
          kill $MKDOCS_PID